<?php
// $Id$

/**
 * @file
 * Provide schema and installation functions.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_schema().
 */
function pift_schema() {
  $schema['pift_test'] = array(
    'description' => t('Stores test results.'),
    'fields' => array(
      'test_id' => array(
        'description' => t('Unique test ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => t('Type of test, PIFT_TYPE_*.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'id' => array(
        'description' => t('Related test detail record ID, either rid, or fid.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => t('Status of the test, PIFT_STATUS_*.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'message' => array(
        'description' => t('Summary message of test result.'),
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'last_tested' => array(
        'description' => t('Timestamp when test results were last recieved.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('type', 'id', 'test_id'),
    'indexes' => array(
      'status' => array('status'),
      'last_tested' => array('last_tested'),
      'type_id' => array('type', 'id'),
    ),
  );
  $schema['pift_project'] = array(
    'description' => t('Store project testing preference.'),
    'fields' => array(
      'pid' => array(
        'description' => t('Reference to project NID.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function pift_install() {

  // Ensure that pift runs after comment_upload.
  db_update('system')
    ->fields(array('weight' => 3))
    ->condition('name', 'pift')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function pift_uninstall() {

  $vars = array(
    'pift_frequency',
    'pift_last',
    'pift_key',
    'pift_server',
    'pift_description',
    'pift_followup_fail',
    'pift_followup_retest',
    'pift_regex',
    'pift_status',
    'pift_core',
    'pift_pid',
    'pift_retest',
    'pift_delete',
    'pift_last_cid',
  );

  foreach ($vars as $var) {
    variable_del($var);
  }
}

/**
 * Implements hook_update_last_removed()
 */
function pift_update_last_removed() {
  return 6204;
}
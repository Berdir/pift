<?php
// $Id$

/**
 * Implementation of hook_schema().
 */
function pift_server_schema() {
  $schema['pift_data'] = array(
    'description' => t('Holds data for file testing results.'),
    'fields' => array(
      'ftid' => array(
        'description' => t('Unique file testing ID.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'fid' => array(
        'description' => t('Foreign key for {files}.fid'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => t('The issue node ID as in {node}.nid'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => t('Foreign key for {comments}.cid'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('Foreign key for {users}.uid'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'display_data' => array(
        'description' => t('The result data to display.'),
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => t('The testing status of the file.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => t('Unix timestamp for the last time the file was updated.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('ftid'),
    'indexes' => array(
      'nid' => array('nid'),
      'cid' => array('cid'),
      'timestamp' => array('timestamp'),
    ),
  );

  $schema['pift_subscriptions'] = array(
    'description' => t('Tracks user subscriptions to file test result emails.'),
    'fields' => array(
      'uid' => array(
        'description' => t('Foreign key for {users}.uid'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function pift_server_install() {
  // It seems the .module file isn't included yet, so include it manually...
  require_once(drupal_get_path('module', 'pift_server') .'/pift_server.module');

  // Create tables.
  $ret = drupal_install_schema('pift_server');

  $failed = array();
  foreach ($ret as $query) {
    if (!$query['success']) {
      $failed[] = $query['query'];
    }
  }

  $set_weight = db_query("UPDATE {system} SET weight = 3 WHERE  name = 'pift_server'");

  if (empty($failed) && $set_weight) {
    // Set up the send queue to start with new issues/comments.
    pift_server_reset_send_queue();
    drupal_set_message(t('The Project issue file test server module was installed successfully.'));
  }
  else {
    drupal_set_message(t('There was an error installing the Project issue file test server module tables.'));
  }
}

/**
 * Implementation of hook_uninstall().
 */
function pift_server_uninstall() {

  // Remove tables.
  drupal_uninstall_schema('pift_server');

  $vars = array(
    'pift_server_sites',
    'pift_server_send_frequency',
    'pift_server_last_sent',
    'pift_failed_test_mail_text',
    'pift_next_test_server',
    'pift_server_file_description',
    'pift_send_limit',
    'pift_batch_size',
    'pift_file_regex',
    'pift_resend_time',
    'pift_retest_time',
    'pift_test_status',
    'pift_projects',
    'pift_server_release_tag_regex',
    'pift_server_debug_file_testing_link',
    'pift_server_auto_followup_sid',
  );

  foreach ($vars as $var) {
    variable_del($var);
  }

  drupal_set_message(t('The Project issue file test server module was uninstalled successfully.'));
}

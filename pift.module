<?php
// $Id$
/**
 * @file
 * Integrates into project to provide an automated testing hub.
 *
 * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/*
 * Variables loaded as constants.
 */
define('PIFT_FREQUENCY', variable_get('pift_frequency', -1));
define('PIFT_LAST', variable_get('pift_last', 0));
define('PIFT_KEY', variable_get('pift_key', ''));
define('PIFT_SERVER', variable_get('pift_server', ''));
define('PIFT_DESCRIPTION', variable_get('pift_description', ''));
define('PIFT_FOLLOWUP', variable_get('pift_followup', 'patch (code needs work)'));
define('PIFT_REGEX', variable_get('pift_regex', '/(\.diff|\.patch)$/'));
define('PIFT_PID', variable_get('pift_pid', -1));
define('PIFT_RETEST', variable_get('pift_retest', 24 * 60 * 60));
define('PIFT_DELETE', variable_get('pift_delete', FALSE));
define('PIFT_LAST_CID', variable_get('pift_last_cid', 0));

/*
 * Test status codes.
 */
define('PIFT_STATUS_QUEUE', 1);
define('PIFT_STATUS_PASS', 2);
define('PIFT_STATUS_FAIL', 3);
define('PIFT_STATUS_RETEST', 4);

if (!defined('PIFR_RESPONSE_ACCEPTED')) {
  /*
   * PIFR XML-RPC response codes.
   */
  define('PIFR_RESPONSE_ACCEPTED', 1);
  define('PIFR_RESPONSE_INVALID_SERVER', 2);
  define('PIFR_RESPONSE_DENIED', 3);

  /*
   * Project type codes.
   */
  define('PIFR_SERVER_PROJECT_TYPE_CORE', 1);
  define('PIFR_SERVER_PROJECT_TYPE_MODULE', 2);
}

/*
 * Load required includes.
 */
module_load_include('project.inc', 'pift');
module_load_include('test.inc', 'pift');

/**
 * Implementation of hook_menu().
 */
function pift_menu() {
  $items = array();

  $items['admin/project/pift'] = array(
    'title' => 'PIFT settings',
    'description' => 'Configure PIFT.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pift_admin_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'pift.admin.inc',
  );

  $items['pift/retest/%'] = array(
    'title' => 'Request to re-test a file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pift_pages_retest_confirm_form', 2),
    'access arguments' => array('pift re-test files'),
    'file' => 'pift.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function pift_perm() {
  return array('pift re-test files');
}

/**
 * Implementation of hook_theme().
 */
function pift_theme() {
  return array(
    'pift_attachments' => array(
      'arguments' => array(
        'files' => array(),
      ),
      'file' => 'pift.pages.inc',
    ),
    'pift_auto_close_message' => array(
      'arguments' => array(
        'last_file' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function pift_init() {
  drupal_add_css(drupal_get_path('module', 'pift') . '/pift.css');
}

/**
 * Implementation of hook_cron().
 */
function pift_cron() {
  if (PIFT_DELETE) {
    // An issue comment or node has been deleted, remove related test entries.
    pift_test_delete_files();
    variable_set('pift_delete', FALSE);
  }

  if (PIFT_FREQUENCY != -1) {
    // Sending is enabled, make sure frequency has elapsed.
    $time = time();
    if ($time > PIFT_LAST + PIFT_FREQUENCY) {
      module_load_include('cron.inc', 'pift');

      pift_cron_retest();

      $cid = db_result(db_query('SELECT MAX(cid) FROM {cvs_messages}'));
      if ($cid > PIFT_LAST_CID) {
        pift_cron_test_release(PIFT_LAST_CID + 1, $cid);
        variable_set('pift_last_cid', $cid);
      }

      pift_cron_queue_batch();

      variable_set('pift_last', $time);
    }
  }
}

/**
 * Implementation of hook_form_alter(). Must use generic form_alter() due to
 * comment_upload implementation.
 */
function pift_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'comment_form' || $form_id == 'project_issue_node_form') {
    module_load_include('pages.inc', 'pift');
    pift_pages_description_add($form, $form_state, $form_id);
  }
}

/**
 * Implementation of hook_form_alter(): project_issue_project_edit_form.
 */
function pift_form_project_issue_project_edit_form_alter(&$form, $form_state) {
  module_load_include('pages.inc', 'pift');
  pift_pages_project_issue_settings($form, $form_state);
}

/**
 * Implementation of hook_nodeapi().
 */
function pift_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != 'project_issue' || empty($node->files)) {
    return;
  }

  switch ($op) {
    case 'view':
      if (!$a3) { // Full view.
        $files = pift_test_get_files_node($node->nid);
        $node->content['pift_files'] = array(
          '#value' => '<div id="pift-results-' . $node->nid . '">' .
                      theme('pift_attachments', $files) . '</div>',
          '#weight' => 50,
        );
        unset($node->content['files']); // Remove old attachments table.
      }
      break;
    case 'insert':
      $files = upload_load($node);
      pift_test_add_files($files);
      break;
    case 'delete':
      variable_set('pift_delete', TRUE);
      break;
  }
}

/**
 * Implementation of hook_comment().
 */
function pift_comment(&$comment, $op) {
  $node = pift_comment_load_node($comment);
  if ($node->type != 'project_issue') {
    return;
  }

  switch ($op) {
    case 'view':
      if (!empty($comment->files)) {
        // Remove comment_upload attachments table and generate new one.
        $comment->comment = preg_replace('/<table class="comment-upload-attachments">.*?<\/table>/s', '', $comment->comment);
        $files = pift_test_get_files_comment($comment->cid);
        $comment->comment .= '<div id="pift-results-' . $comment->nid . '-' . $comment->cid . '">' .
                             theme('pift_attachments', $files) . '</div>';
      }
      break;
    case 'insert':
      if (pift_test_check_criteria_issue($node)) {
        if (!empty($comment->files)) {
          // Add attachments to this comment to the send queue.
          $files = comment_upload_load_files($comment['cid']);
          pift_test_add_files($files);
        }

        // Add previously submitted files if issue state changes.
        pift_test_add_previous_files($comment['nid']);
      }
      break;
    case 'delete':
      variable_set('pift_delete', TRUE);
      break;
  }
}

/**
 * Load the parent node for the specified comment.
 *
 * @param mixed $comment Comment information passed to hook_comment().
 * @return object Parent node.
 */
function pift_comment_load_node($comment) {
  // Comment can be a comment object, a form, or form_values.
  if (is_object($comment)) {
    $nid = $comment->nid;
  }
  elseif (is_array($comment)) {
    $nid = is_array($comment['nid']) ? $comment['nid']['#value'] : $comment['nid'];
  }
  return node_load($nid);
}

/**
 * Manually requests patch re-testing.
 */
function pift_request_retest_confirm_form_submit($form, &$form_state) {
  $file_info = $form['#file_info'];
  // Check issue filters here to provide an intelligent user
  // message to the user if the filters don't pass.
  if (pift_check_issue_filters($file_info->nid)) {
    // Mark for re-testing.  Set last tested timestamp to zero here
    // so the file doesn't have to wait the whole PIFT_RETEST period
    // to be sent for testing -- the timestamp will be updated as soon
    // as the file is sent anyways.
    db_query("UPDATE {pift_data} SET display_data = '%s', status = %d, timestamp = %d WHERE ftid = %d", 'manual re-test', PIFT_STATUS_RETEST, 0, $file_info->ftid);
    // In case the file was removed from the testable files list
    // from the time it was submitted.
    if (db_affected_rows()) {
      drupal_set_message(t('%file has been submitted for re-testing -- results will be posted when testing completes.', array('%file' => $file_info->filename)));
    }
    else {
      drupal_set_message(t('Invalid file submitted.'), 'error');
    }
  }
  else {
    drupal_set_message(t('%file is not currently eligible for re-testing, and was not submitted.', array('%file' => $file_info->filename)), 'error');
  }

  $form_state['redirect'] = "node/$file_info->nid";
}

/**
 * Checks a file to see if an auto status change is needed.
 *
 * Only files that have failed testing are eligible.  If the
 * auto followup sid is set, and the file failed testing, and the
 * file is the last testable file posted to the issue, then it
 * leaves a followup setting the issue sid to the auto followup
 * sid.
 *
 * @param $file
 *   An associative array of file test result information,
 *   with the following key/value pairs:
 *
 *     ftid     => The file test ID passed to the testing server.
 *     issue_id => The issue node the file is attached to.
 *     status   => The test result, should be on of the
 *                 constants PIFT_STATUS_PASSED, PIFT_STATUS_FAILED
 */
function pift_check_auto_followup($file) {

  // Only if an auto change followup sid is set, and only for failed files.
  if (variable_get('pift_auto_followup_sid', 0) && $file['status'] == PIFT_STATUS_FAIL) {
    $join = '';
    $where = '';
    $args = array($file['issue_id']);

    // Restrict to listed projects, if set.
    if ($projects = pift_project_list()) {
      $where .= ' AND pi.pid IN ('. implode(',', array_fill(0, count($projects), '%d')) .')';
      $args = array_merge($args, $projects);
    }

    // Restrict to the status list, if set.
    if ($status_list = pift_status_list()) {
      $where .= ' AND pi.sid IN ('. implode(',', array_fill(0, count($status_list), '%d')) .')';
      $args = array_merge($args, $status_list);
    }

    // Restrict to release tag, if set.
    if (module_exists('project_release')) {
      if ($release_tag_regex = variable_get('pift_release_tag_regex', '')) {
        $join = ' LEFT JOIN {project_release_nodes} prn ON pi.rid = prn.nid';
        $where .= " AND prn.tag REGEXP '%s'";
        $args[] = $release_tag_regex;
      }
    }

    // Pull last testable file for the issue.
    $last_file = db_fetch_object(db_query_range("SELECT pd.ftid, pd.nid, pd.cid, pd.status FROM {pift_data} pd INNER JOIN {project_issues} pi ON pd.nid = pi.nid$join WHERE pd.nid = %d$where ORDER BY ftid DESC", $args, 0, 1));

    // There's an attached testable file on the issue, and
    // the file in question is the last file attached to the
    // issue.
    if ($last_file && $file['ftid'] == $last_file->ftid) {
      pift_auto_followup($last_file);
    }
  }
}

/**
 * Posts a followup to an issue.
 *
 * Sets the issue sid to the auto followup sid.
 *
 * @param $last_file
 *   A testable file object.
 */
function pift_auto_followup($last_file) {

  project_issue_add_auto_followup(array(
    'nid' => $last_file->nid,
    'sid' => variable_get('pift_auto_followup_sid', 0),
    'comment' => theme('pift_auto_close_message', $last_file),
  ));
}

function pift_check_followup_metadata($comment) {

  $auto_followup_sid = variable_get('pift_auto_followup_sid', 0);

  // If no auto followup sid exists, then this check isn't necessary.
  if (!$auto_followup_sid) {
    return;
  }

  $projects = pift_project_list();
  $status_list = pift_status_list();
  $pid = $comment['project_info']['pid'];
  $sid = $comment['sid'];
  $rid = $comment['project_info']['rid'];
  $nid = $comment['nid'];
  $release_tag_regex = variable_get('pift_release_tag_regex', '');

  // Only proceed with checking if the current project and issue
  // status pass the filters. There's no easy way to check the
  // release tag filter here, so we'll check it when we pull the
  // last testable file.
  if ((empty($projects) || in_array($pid, $projects)) && (empty($status_list) || in_array($sid, $status_list))) {
    // We have to check to see if either pid, sid, or rid
    // has actually changed. There's no reliable way to do this
    // without querying {project_issue_comments} for it.
    $last_post = db_fetch_object(db_query_range("SELECT pid, sid, rid FROM {project_issue_comments} WHERE nid = %d AND cid <> %d ORDER BY cid DESC", $nid, $comment['cid'], 0, 1));
    // This comment being inserted is the first followup, so get
    // pid, sid, and rid from the issue itself.
    if (!$last_post) {
      $last_post = db_fetch_object(db_query("SELECT pid, sid, rid FROM {project_issues} WHERE nid = %d", $nid));
    }
    // A metadata change only matters if a filter is set, and
    // we need at least one piece of metadata to have changed.
    $metadata_change = (!empty($projects) && $last_post->pid != $pid) || (!empty($status_list) && $last_post->sid != $sid) || (!empty($release_tag_regex) && $last_post->rid != $rid);
    // Continue if there was a metadata change, except
    // in the special case where a user is trying to manually
    // set the issue state from the auto followup state to a testable
    // state, we want to allow this.
    if ($metadata_change && $last_post->sid != $auto_followup_sid) {
      $join = '';
      $where = '';
      $args = array($nid);
      // Restrict to release tag, if set.
      if (module_exists('project_release') && $release_tag_regex) {
        $join = ' INNER JOIN {project_issues} pi ON pd.nid = pi.nid LEFT JOIN {project_release_nodes} prn ON pi.rid = prn.nid';
        $where .= " AND prn.tag REGEXP '%s'";
        $args[] = $release_tag_regex;
      }

      // Pull last testable file for the issue.
      $last_file = db_fetch_object(db_query_range("SELECT pd.nid, pd.cid, pd.status FROM {pift_data} pd$join WHERE pd.nid = %d$where ORDER BY ftid DESC", $args, 0, 1));

      // There's an attached testable file on the issue, and
      // the last testable file has failed testing.
      if ($last_file && $last_file->status == PIFT_STATUS_FAIL) {
        pift_auto_followup($last_file);
      }
    }
  }
}

/**
 * Themes the comment posted on auto followups.
 *
 * @param $last_file
 *   A testable file object.
 */
function theme_pift_auto_close_message($last_file) {

  $output = '';
  $id = "#file-test-results-$last_file->nid";
  if ($last_file->cid) {
    $id .= "-$last_file->cid";
  }
  $output .= t('The last submitted patch <a href="@link">failed testing</a>.', array('@link' => $id));

  return $output;
}

/**
 * Records XML-RPC errors communicating to test servers.
 *
 * @param $server
 *   An associative array of server information, as follows:
 *     'user' => The user logging in.
 *     'xmlrpc_url' => The XML-RPC URL of the test server.
 *     'url'  => The Drupal base URL of the server sending the data.
 *
 * @param $error_code
 *   Optional. A string representing a validation error type.
 */
function pift_xmlrpc_error_handler($server, $error_code = NULL) {
  global $base_url;

  $t_args = array('%url' => $base_url, '%xmlrpc_url' => $server['xmlrpc_url']);

  switch ($error_code) {
    case PIFR_RESPONSE_INVALID_SERVER:
      watchdog('project_remote', 'Unable to log in %url to %xmlrpc_url -- invalid server key.', $t_args, WATCHDOG_ERROR);
      break;
    default:
      watchdog('project_remote', 'XML-RPC error communicating with %xmlrpc_url', $t_args, WATCHDOG_ERROR);
      break;
  }
}

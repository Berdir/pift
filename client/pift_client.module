<?php
// $Id$
// $Name$

// File testing status definitions.
define('PIFT_PASSED', 1);
define('PIFT_FAILED', 2);

/**
 * Implementation of hook_help().
 */
function pift_client_help($path, $arg) {
  switch ($path) {
    // Admin settings page.
    case 'admin/settings/project-issue-file-test-client':
      return t("
      <p>This module accepts file test data from the <em>Project issue file test server</em> module located on a remote site, tests the files, and sends back test results.</p>
      ");
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function pift_client_perm() {
  return array(
    'receive file test data',
    'administer file test client',
  );
}

/**
 * Callback for the main settings page.
 */
function pift_client_settings_form(&$form_state) {

  // Warn about login security issues.
  $form['pift_client_access_warning'] = array(
    '#prefix' => '<div class="pift-client-warning">',
    '#suffix' => '</div>',
    '#value' => t('IMPORTANT:<p>Keep the login information below confidential.</p>')
  );

  $form['pift_client_sites'] = array(
    '#type' => 'textarea',
    '#title' => t('File test server sites'),
    '#default_value' => variable_get('pift_client_sites', ''),
    '#description' => t("List the servers that may send file data for testing. Each site that sends information must have the <em>Project issue file test server</em> module installed, and you must include valid login information for a Drupal user on that site who has the 'administer projects' permission. Put one server site per line, in the following format: <em>user::password::xmlrpc-url</em>. For example, <em>myusername::mypassword::http://example.com/xmlrpc.php</em>"),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function pift_client_menu() {
  $items = array();

  // Admin page.
  $items['admin/settings/project-issue-file-test-client'] = array(
    'title' => 'Project issue file test client settings',
    'description' => 'Configure receiving of project issue file test data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pift_client_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer file test client'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_init()
 */
function pift_client_init() {

  // Include the CSS file.
  drupal_add_css(drupal_get_path('module', 'pift_client') .'/pift_client.css');
}

/**
 * Implementation of hook_xmlrpc()
 */
function pift_client_xmlrpc() {
  return array(
    array(
      'pift.test.files',
      'pift_client_test_files',
      array('struct', 'struct', 'struct'),
      t('test project issue files')
    ),
  );
}

/**
 * Gathers all login data for all valid project servers
 *
 * @return
 *   An array of login data for valid project servers.
 */
function pift_client_get_project_servers() {
  global $base_url;

  $test_servers = explode("\n", variable_get('pift_client_sites', ''));
  $valid_servers = array();
  foreach ($test_servers as $test_server) {
    if ($test_server) {
      // Set up the login data for project server. The project server needs
      // a username, password, and the base URL of the sending test server.
      $parts = explode('::', $test_server);
      $valid_servers[$parts[2]]['user'] = $parts[0];
      $valid_servers[$parts[2]]['pass'] = $parts[1];
      $valid_servers[$parts[2]]['xmlrpc_url'] = $parts[2];
      $valid_servers[$parts[2]]['url'] = $base_url .'/xmlrpc.php';
    }
  }

  return $valid_servers;
}

/**
 * Validates incoming file data and passes them along for processing.
 *
 * @param $server
 *   An associative array of login parameters, as follows:
 *     'user' => The username to log in.
 *     'pass' => The user's password.
 *     'url'  => The Drupal base URL of the server sending the data.
 *
 * @param $files
 *   An array of files to test. Each element is an associative array
 *   of information for one file, as follows:
 *
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'cid'           => The comment ID of the comment the patch is
 *                        attached to.
 *
 *     'pid'           => The project ID.
 *
 *     'rid'           => The release ID.
 *
 *     'uid'           => The uid of the user who submitted the file.
 *
 *     'issue_id'      => nid of the issue.
 *
 *     'issue_title'   => Title of the issue.
 *
 *     'project'       => Project the patch is for.
 *
 *     'version'       => Project version string.
 *
 *     'submitter'     => Drupal user submitting the patch.
 *
 *     'patch_url'     => The absolute URL for the file.
 *
 * @return
 *   TRUE if the file data was properly validated, FALSE otherwise.
 */
function pift_client_test_files($server, $files) {

  // Grab all valid project servers.
  $valid_servers = pift_client_get_project_servers();

  // No servers, bail.
  if (empty($valid_servers)) {
    watchdog('project_remote', 'Testing aborted -- no valid project servers.', array(), WATCHDOG_ERROR);
    return array('error' => 'PIFT_XMLRPC_INVALID_SERVER');
  }

  // Validate the project server URL against the list of valid project servers.
  if (in_array($server['url'], array_keys($valid_servers))) {
    // Validate the user submitting the files for testing.
    if (pift_client_validate_user($server['user'], $server['pass'])) {
      // When processing, send the project server that asked for the tests,
      // so test data can be sent back.
      pift_client_process_files($valid_servers[$server['url']]['xmlrpc_url'], $files);
      return array();
    }
    // Bad login.
    else {
      watchdog('project_remote', 'Invalid user %user tried to send project issue file test data.', array('%user' => $server['user']), WATCHDOG_WARNING);
      return array('error' => 'PIFT_XMLRPC_INVALID_USER');
    }
  }
  // Bad server.
  else {
    watchdog('project_remote', '%server attempted to send file test data, and is not on the valid server list.', array('%server' => $server['url']), WATCHDOG_WARNING);
    return array('error' => 'PIFT_XMLRPC_INVALID_SERVER');
  }
}

/**
 * Process files for testing.
 *
 * @param $project_server
 *   XML-RPC URL of project server requesting the test results.
 *
 * @param $files
 *   An array of files to test. Each element is an associative array
 *   of information for one file, as follows:
 *
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'cid'           => The comment ID of the comment the patch is
 *                        attached to.
 *
 *     'pid'           => The project ID.
 *
 *     'rid'           => The release ID.
 *
 *     'uid'           => The uid of the user who submitted the file.
 *
 *     'issue_id'      => nid of the issue.
 *
 *     'issue_title'   => Title of the issue.
 *
 *     'project'       => Project the patch is for.
 *
 *     'version'       => Project version string.
 *
 *     'submitter'     => Drupal user submitting the patch.
 *
 *     'patch_url'     => The absolute URL for the file.
 */
function pift_client_process_files($project_server, $files) {

  foreach ($files as $file) {
    module_invoke_all('pift_client_process_file', $project_server, $file);
  }
}

/**
 * Passes data for a single patch file from the sending server.
 *
 * In the example code for the hook, files fail if the word 'fail'
 * is included in the file, otherwise they pass.
 *
 * @param $project_server
 *   XML-RPC URL of project server requesting the test results.
 * @param $file
 *   An associative array representing a file to test, with the following
 *   key/value pairs:
 *
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'cid'           => The comment ID of the comment the patch is
 *                        attached to.
 *
 *     'pid'           => The project ID.
 *
 *     'rid'           => The release ID.
 *
 *     'uid'           => The uid of the user who submitted the file.
 *
 *     'issue_id'      => nid of the issue.
 *
 *     'issue_title'   => Title of the issue.
 *
 *     'project'       => Project the patch is for.
 *
 *     'version'       => Project version string.
 *
 *     'submitter'     => Drupal user submitting the patch.
 *
 *     'patch_url'     => The absolute URL for the file.
 */
function hook_pift_client_process_file($project_server, $file) {
  $test_result['ftid'] = $file['ftid'];

  // Read in file.
  $fd = fopen($file['patch_url'], 'r');
  $file['data'] = '';
  while (!feof($fd)) {
      $file['data'] .= fread($fd, 1024);
  }
  fclose($fd);

  // Fails test if it contains the word 'fail'.
  if (strpos($file['data'], 'fail') !== FALSE) {
    $test_result['display_data'] = "{$file['project']}, {$file['version']}, by {$file['submitter']} -- contains the word 'fail'";
    $test_result['status'] = PIFT_FAILED;
  }
  else {
    $test_result['display_data'] = "{$file['project']}, {$file['version']}, by {$file['submitter']} -- all syntax good";
    $test_result['status'] = PIFT_PASSED;
  }

  pift_client_send_test_results($project_server, array($test_result));
}

/**
 * Send file test results to a project server.
 *
 * @param $project_server
 *   XML-RPC URL of project server requesting the test results.
 *
 * @param $files
 *   An array of tested files. Each element is an associative array
 *   of information for one file, as follows:
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'status'        => The file's test status (passed, failed, etc.).
 *                        Use the provided constants: PIFT_PASSED, PIFT_FAILED.
 *
 *     'display_data'  => Optional. A string of additional data to display
 *                       when rendering the file test results.
 */
function pift_client_send_test_results($project_server, $files) {

  // Grab all valid project servers.
  $valid_servers = pift_client_get_project_servers();
  //Load in the server that requested the tests.
  $server = $valid_servers[$project_server];

  // Send test results.
  $result = xmlrpc($server['xmlrpc_url'], 'pift.test.results', $server, $files);

  // Failed XML-RPC call.
  if ($result === FALSE) {
    pift_server_xmlrpc_error_handler($server);
  }
  // Failed test server validation.
  elseif (isset($result['error'])) {
    pift_server_xmlrpc_error_handler($server, $result['error']);
  }
  else {
    watchdog('project_remote', 'File test results sent successfully to %project_server', array('%project_server' => $project_server));
  }
}

/**
 * Ensure that the given user has permission to send files for testing.
 */
function pift_client_validate_user($username, $password) {
  global $user;

  $user = user_authenticate(array('name' => $username, 'pass' => $password));

  if ($user->uid) {
    if (user_access('receive file test data', $user)) {
      return $user;
    }
  }

  return FALSE;
}

/**
 * Records XML-RPC errors communicating to project servers.
 *
 * @param $server
 *   An associative array of server information, as follows:
 *     'user' => The user logging in.
 *     'xmlrpc_url' => The XML-RPC URL of the project server.
 *     'url'  => The Drupal base URL of the server sending the data.
 *
 * @param $error_code
 *   Optional. A string representing a validation error type.
 */
function pift_client_xmlrpc_error_handler($server, $error_code = NULL) {
  global $base_url;

  $t_args = array('%url' => $base_url, '%xmlrpc_url' => $server['xmlrpc_url'], '%user' => $server['user']);

  switch ($error_code) {
    case 'PIFT_XMLRPC_INVALID_SERVER':
      watchdog('project_remote', '%url is not listed as a valid test server at project server %xmlrpc_url', $t_args, WATCHDOG_ERROR);
      break;
    case 'PIFT_XMLRPC_INVALID_USER':
      watchdog('project_remote', 'Unable to log in %url to %xmlrpc_url using user %user, due to invalid login credentials or insufficient user permissions.', $t_args, WATCHDOG_ERROR);
      break;
    default:
      watchdog('project_remote', 'XML-RPC error communicating with %xmlrpc_url', $t_args, WATCHDOG_ERROR);
      break;
  }
}

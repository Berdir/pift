<?php
// $Id$

// File testing status definitions.
define('PIFT_PASSED', 1);
define('PIFT_FAILED', 2);

/**
 * Implementation of hook_help().
 */
function pift_client_help($section) {
  switch ($section) {
    // Admin settings page.
    case 'admin/settings/project-issue-file-test-client':
      return t("
      <p>This module provides a simple test implementation of the Project issue file review module, to allow for local testing of the <em>Project issue file test server</em> module.</p>
      ");
      break;
  }
}

/**
 * Implementation of hook_xmlrpc()
 */
function pift_client_xmlrpc() {
  return array(
    array(
      'pifr.batch.queue',
      'pift_client_process_files',
      array('struct', 'string', 'struct'),
      t('test project issue files')
    ),
  );
}

/**
 * Process files for testing.
 */
function pift_client_process_files($server_key, $files) {

  foreach ($files as $file) {
    module_invoke_all('pift_client_process_file', $server_key, $file);
  }
}

/**
 * Passes data for a single patch file from the sending server.
 *
 * In the example code for the hook, files fail if the word 'fail'
 * is included in the file, otherwise they pass.
 *
 * @param $server_key
 *   Server access key of the project server sending the file.
 * @param $file
 *   An associative array representing a file to test, with the following
 *   key/value pairs:
 *
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'cid'           => The comment ID of the comment the patch is
 *                        attached to.
 *
 *     'pid'           => The project ID.
 *
 *     'rid'           => The release ID.
 *
 *     'uid'           => The uid of the user who submitted the file.
 *
 *     'issue_id'      => nid of the issue.
 *
 *     'issue_title'   => Title of the issue.
 *
 *     'project'       => Project the patch is for.
 *
 *     'version'       => Project version string.
 *
 *     'tag'           => Release tag as found in {project_release_nodes}.
 *
 *     'submitter'     => Drupal user submitting the patch.
 *
 *     'patch_url'     => The absolute URL for the file.
 */
function pift_client_pift_client_process_file($server_key, $file) {
  global $base_url;

  $detail_link = l("{$base_url}/node/{$file['issue_id']}", "node/{$file['issue_id']}", array(), NULL, NULL, TRUE);

  $test_result['ftid'] = $file['ftid'];
  $test_result['issue_id'] = $file['issue_id'];

  // Read in file.
  $fd = fopen($file['patch_url'], 'r');
  $file['data'] = '';
  while (!feof($fd)) {
      $file['data'] .= fread($fd, 1024);
  }
  fclose($fd);

  // Fails test if it contains the word 'fail'.
  if (strpos($file['data'], 'fail') !== FALSE) {
    $test_result['display_data'] = "<div>{$file['project']}, {$file['version']}, by {$file['submitter']} -- contains the word 'fail'</div><div>For more detailed results, see $detail_link</div>";
    $test_result['status'] = PIFT_FAILED;
  }
  else {
    $test_result['display_data'] = "<div>{$file['project']}, {$file['version']}, by {$file['submitter']} -- all syntax good</div><div>For more detailed results, see $detail_link</div>";
    $test_result['status'] = PIFT_PASSED;
  }

  $server = array(
    'url' => $base_url .'/xmlrpc.php',
    'server_key' => $server_key,
  );

  pift_client_send_test_results($server, array($test_result));
}

/**
 * Send file test results to a project server.
 *
 * @param $server
 *   An associative array of login parameters, as follows:
 *     'url'        => The Full XML-RPC URL of the server sending the
 *                      data, ex. http://example.com/xmlrpc.php
 *     'server_key' => The server key for the server sending the data.
 *
 * @param $files
 *   An array of tested files. Each element is an associative array
 *   of information for one file, as follows:
 *     'ftid'          => The file test ID that was originally passed from
 *                       the test server for the file in question.
 *
 *     'status'        => The file's test status (passed, failed, etc.).
 *                        Use the provided constants: PIFT_PASSED, PIFT_FAILED.
 *
 *     'display_data'  => Optional. A string of additional data to display
 *                       when rendering the file test results.
 */
function pift_client_send_test_results($server, $files) {

  // Send test results.
  $result = xmlrpc($server['url'], 'pift.test.results', $server, $files);

  // Failed XML-RPC call.
  if ($result === FALSE) {
    pift_client_xmlrpc_error_handler($server);
  }
  // Failed test server validation.
  elseif (isset($result['error'])) {
    pift_client_xmlrpc_error_handler($server, $result['error']);
  }
  else {
    watchdog('project_remote', t('File test results sent successfully to %project_server', array('%project_server' => $project_server)));
  }
}

/**
 * Records XML-RPC errors communicating to project servers.
 *
 * @param $server
 *   An associative array of server information, as follows:
 *     'user' => The user logging in.
 *     'xmlrpc_url' => The XML-RPC URL of the project server.
 *     'url'  => The Drupal base URL of the server sending the data.
 *
 * @param $error_code
 *   Optional. A string representing a validation error type.
 */
function pift_client_xmlrpc_error_handler($server, $error_code = NULL) {

  $t_args = array('%url' => $server['url']);

  switch ($error_code) {
    case 'PIFT_XMLRPC_INVALID_SERVER':
      watchdog('project_remote', t('%url is not listed as a valid project server at test server %url', $t_args), WATCHDOG_ERROR);
      break;
    case 'PIFT_XMLRPC_INVALID_SERVER_KEY':
      watchdog('project_remote', t('Unable to log in %url to %url -- invalid server key.', $t_args), WATCHDOG_ERROR);
      break;
    default:
      watchdog('project_remote', t('XML-RPC error communicating with %url', $t_args), WATCHDOG_ERROR);
      break;
  }
}
